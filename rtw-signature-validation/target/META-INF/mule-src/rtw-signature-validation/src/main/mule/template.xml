<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http-policy="http://www.mulesoft.org/schema/mule/http-policy"
      xmlns:http-transform="http://www.mulesoft.org/schema/mule/http-policy-transform"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/http-policy http://www.mulesoft.org/schema/mule/http-policy/current/mule-http-policy.xsd
               http://www.mulesoft.org/schema/mule/http-policy-transform http://www.mulesoft.org/schema/mule/http-policy-transform/current/mule-http-policy-transform.xsd">


    <http-policy:proxy name="{{{policyId}}}-custom-policy">
        <http-policy:source>
			<set-variable variableName="signature" value="{{{signatureExpression}}}"/>
			<set-variable variableName="webhookURL" value="{{{webhookURL}}}"/>
			<set-variable variableName="secretKey" value="{{{secretKey}}}"/>
			<logger level="INFO" doc:name="Logger" doc:id="2537a686-5462-4010-a880-6f04a00cb38d" message="Signature in the request header is: #[vars.signatureExpression]"/>
			<logger level="INFO" doc:name="Logger" doc:id="6268dcfe-70e5-41f0-a012-5a5d94360c5d" message="Request URL is: {{{webhookURL}}}"/>
			<logger level="INFO" doc:name="Logger" doc:id="468ce006-9f68-4838-8e32-e20e9c97f165" message="Secret key is: #[vars.secretKey]"/>
			<logger level="INFO" doc:name="Logger" doc:id="e7ee6be1-3279-475e-b857-5487e4172bfb" message="payload is: #[payload]"/>
			<logger level="INFO" doc:name="Logger" doc:id="63e56192-06d6-4b62-a83a-dbc562327cd9" message="Method is: #[attributes.method]"/>
			<set-variable variableName="calculatedSign" value = '#[%dw 2.0
output application/json
import * from dw::Crypto
import * from dw::core::Strings
import toBase64 from dw::core::Binaries
var varPayload= replaceAll(replaceAll(write(payload, "application/json"),"\n","")," ","")
var MD5digest = toBase64(hashWith(varPayload as Binary,"MD5"))
var contentType = "application/json"
var method = attributes.method
var stringToSign = method ++ ":" ++ MD5digest ++ ":" ++ contentType ++ ":" ++ vars.webhookURL

---
toBase64(HMACBinary(vars.secretKey, stringToSign, "HmacSHA256"))]'/>	
<logger level="INFO" doc:name="Logger" doc:id="e286ff03-1c9d-49f1-a7a3-a03ffd7f64e9" message="Calculated sign is: #[vars.calculatedSign]"/>		
<choice doc:name="Choice" doc:id="5b4e7543-aa65-4811-a386-48bf4a6ffd79" >
			<when expression="#[vars.signature == vars.calculatedSign]">
				<http-policy:execute-next/>
			</when>
			<otherwise >
				<http-transform:set-response statusCode="400">
		                <http-transform:body>#[ '{"error": "The request is not authentic."}' ]</http-transform:body>
		                <http-transform:headers>#[ {'Content-Type': 'application/json'} ]</http-transform:headers>
		            </http-transform:set-response>
			</otherwise>
		</choice>
 

        </http-policy:source>
    </http-policy:proxy>
</mule>
